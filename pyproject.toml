[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "jdl-symphony-core"
dynamic = ["version"]
description = "Local work organization system backend - the orchestral core that harmonizes your development workflow"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "JDL Team", email = "team@jdl.example.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi[standard]>=0.115.0",
    "sqlalchemy>=2.0.0",
    "asyncpg>=0.29.0",
    "alembic>=1.13.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "psycopg2-binary>=2.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "httpx>=0.27.0",
    "ruff>=0.8.0",
    "pyright>=1.1.0",
    "pre-commit>=3.8.0",
]

[project.urls]
"Homepage" = "https://github.com/jdl/symphony-core"
"Bug Tracker" = "https://github.com/jdl/symphony-core/issues"

[tool.hatch.version]
path = "src/symphony/__init__.py"

[tool.hatch.envs.default]
type = "virtual"
path = ".venv"
dependencies = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "httpx>=0.27.0",
    "ruff>=0.8.0",
    "pyright>=1.1.0",
    "pre-commit>=3.8.0",
]

[tool.hatch.envs.dev]
template = "default"

[tool.hatch.envs.dev.scripts]
server = "uvicorn symphony.main:app --reload --host 0.0.0.0 --port 8000"

[tool.hatch.envs.lint]
dependencies = [
    "ruff>=0.8.0",
    "pyright>=1.1.0",
]

[tool.hatch.envs.lint.scripts]
check = [
    "ruff check src tests",
    "ruff format --check src tests",
]
format = [
    "ruff check --fix src tests",
    "ruff format src tests",
]
all = [
    "format",
    "check",
]

[tool.hatch.envs.typecheck]
dependencies = [
    "pyright>=1.1.0",
]

[tool.hatch.envs.typecheck.scripts]
check = "pyright src"

[tool.hatch.envs.test]
dependencies = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "httpx>=0.27.0",
]

[tool.hatch.envs.test.scripts]
cov = "pytest --cov=symphony --cov-report=term-missing --cov-report=html"
no-cov = "pytest"

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "SIM", # flake8-simplify
]
ignore = [
    "E501", # line too long (handled by formatter)
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["B018"] # Allow useless expressions in tests

[tool.pyright]
include = ["src"]
pythonVersion = "3.11"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src/symphony"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.hatch.build.targets.wheel]
packages = ["src/symphony"]